generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

// ===== NextAuth base (SQLite-safe)

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  players       Player[]
  decks         Deck[]
  events        Event[]
  pods          Pod[]
  games         Game[]
  tags          Tag[]
  gameUsers     GamePlayer[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// ===== Domain (SQLite-safe)
// Use Strings instead of enums; validate values in app code.
// Archetype examples: "Turbo","Stax","Midrange","Control","Combo","AdNauseam","Doomsday","Other"
// GameResult examples: "Win","Lose","Draw"

model Player {
  id            String        @id @default(cuid())
  userId        String
  displayName   String
  notes         String?
  decks         Deck[]
  gamePlayers   GamePlayer[]
  eliminations  GamePlayer[] @relation("Eliminations")
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  user          User          @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, displayName])
}

model Deck {
  id            String         @id @default(cuid())
  userId        String
  playerId      String
  name          String
  moxfieldUrl   String?
  archetype     String
  colorIdentity String
  companion     String?
  isActive      Boolean        @default(true)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt

  commanders    DeckCommander[]

  player        Player         @relation(fields: [playerId], references: [id], onDelete: Cascade)
  user          User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  games         GamePlayer[]

  @@unique([playerId, name])
}

model DeckCommander {
  id     String @id @default(cuid())
  deckId String
  name   String
  order  Int    @default(0)

  deck Deck @relation(fields: [deckId], references: [id], onDelete: Cascade)

  @@index([deckId])
}

model Event {
  id        String   @id @default(cuid())
  userId    String
  name      String
  location  String?
  date      DateTime
  pods      Pod[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Pod {
  id        String   @id @default(cuid())
  userId    String
  eventId   String?
  createdAt DateTime @default(now())

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  event     Event?   @relation(fields: [eventId], references: [id], onDelete: SetNull)
  games     Game[]
}

model Game {
  id         String     @id @default(cuid())
  userId     String
  podId      String
  startedAt  DateTime
  endedAt    DateTime?
  turnsToWin Int?
  notes      String?
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt

  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  pod         Pod         @relation(fields: [podId], references: [id], onDelete: Cascade)
  gamePlayers GamePlayer[]
  tags        GameTag[]
}

model GamePlayer {
  id                   String  @id @default(cuid())
  userId               String
  gameId               String
  playerId             String
  deckId               String
  seat                 Int
  mulligans            Int     @default(0)
  result               String
  eliminatedByPlayerId String?
  turnEliminated       Int?
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  game   Game   @relation(fields: [gameId], references: [id], onDelete: Cascade)
  player Player @relation(fields: [playerId], references: [id])
  deck   Deck   @relation(fields: [deckId], references: [id])

  eliminatedByPlayer Player? @relation("Eliminations", fields: [eliminatedByPlayerId], references: [id], onDelete: SetNull)

  @@unique([gameId, playerId])
  @@unique([gameId, seat])
  @@index([gameId])
  @@index([playerId])
  @@index([deckId])
}

model Tag {
  id        String   @id @default(cuid())
  userId    String
  name      String
  games     GameTag[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, name])
}

model GameTag {
  gameId String
  tagId  String

  game Game @relation(fields: [gameId], references: [id], onDelete: Cascade)
  tag  Tag  @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@id([gameId, tagId])
}

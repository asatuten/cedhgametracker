generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = env("DATABASE_PROVIDER")
  url      = env("DATABASE_URL")
}

enum Archetype {
  Turbo
  Stax
  Midrange
  Control
  Combo
  AdNauseam
  Doomsday
  Other
}

enum GameResult {
  Win
  Lose
  Draw
}

model User {
  id            String   @id @default(cuid())
  name          String?
  email         String?  @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  players       Player[]
  decks         Deck[]
  events        Event[]
  pods          Pod[]
  games         Game[]
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Player {
  id          String   @id @default(cuid())
  userId      String
  displayName String
  notes       String?
  decks       Deck[]
  gamePlayers GamePlayer[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, displayName])
}

model Deck {
  id            String     @id @default(cuid())
  userId        String
  playerId      String
  name          String
  moxfieldUrl   String?
  archetype     Archetype
  colorIdentity String
  commanders    String[]
  companion     String?
  isActive      Boolean   @default(true)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  player        Player    @relation(fields: [playerId], references: [id], onDelete: Cascade)
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  games         GamePlayer[]

  @@unique([playerId, name])
}

model Event {
  id        String   @id @default(cuid())
  userId    String
  name      String
  location  String?
  date      DateTime
  pods      Pod[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Pod {
  id        String   @id @default(cuid())
  userId    String
  eventId   String?
  createdAt DateTime @default(now())
  games     Game[]
  players   GamePlayer[]
  event     Event?   @relation(fields: [eventId], references: [id], onDelete: SetNull)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Game {
  id              String      @id @default(cuid())
  userId          String
  podId           String
  startedAt       DateTime
  endedAt         DateTime?
  turnsToWin      Int?
  winConditionTags String[]
  notes           String?
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  pod             Pod         @relation(fields: [podId], references: [id], onDelete: Cascade)
  user            User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  gamePlayers     GamePlayer[]
  tags            GameTag[]
}

model GamePlayer {
  id                   String     @id @default(cuid())
  userId               String
  gameId               String
  playerId             String
  deckId               String
  seat                 Int
  mulligans            Int
  result               GameResult
  eliminatedByPlayerId String?
  turnEliminated       Int?
  createdAt            DateTime   @default(now())
  updatedAt            DateTime   @updatedAt
  game                 Game       @relation(fields: [gameId], references: [id], onDelete: Cascade)
  player               Player     @relation(fields: [playerId], references: [id])
  deck                 Deck       @relation(fields: [deckId], references: [id])
  eliminatedByPlayer   Player?    @relation("Eliminations", fields: [eliminatedByPlayerId], references: [id])
  user                 User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([gameId, playerId])
  @@unique([gameId, seat])
}

model Tag {
  id        String    @id @default(cuid())
  userId    String
  name      String
  games     GameTag[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, name])
}

model GameTag {
  gameId String
  tagId  String
  game   Game   @relation(fields: [gameId], references: [id], onDelete: Cascade)
  tag    Tag    @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@id([gameId, tagId])
}
